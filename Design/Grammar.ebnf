program -> statement* ;

statement      -> expressionStmt
                | varDeclarationStmt
                | assignmentStmt
                | functionStmt
                | blockStmt
                | returnStmt ;

varDeclarationStmt -> TYPE IDENTIFIER ( "=" expression )? ";" ;
expressionStmt     -> expression ";" ;
assignmentStmt     -> IDENTIFIER "=" expression ";" ;
functionStmt       -> "fn" TYPE IDENTIFIER "(" ( ( argument "," )* argument )* ")" blockStmt ;
blockStmt          -> "{" statement* "}" ;
returnStmt         -> "return" expression ";" ;

argumentStmt -> TYPE IDENTIFIER ;

expression -> equality

equality       -> comparison ( "==" | "!=" comparison )* ;
comparison     -> addition ( ">" | ">=" | "<" | "<=") addition )* ;
addition       -> multiplication ( ( "+" | "-" ) multiplication )* ;
multiplication -> primary ( ( "*" | "/" ) primary )* ;
primary        -> NUMBER | STRING | "true" | "false"
                | "(" expression ")"
                | variableExpr | callExpr ;

variableExpr -> IDENTIFIER;
callExpr     -> IDENTIFIER "(" ( ( expression "," )* expression )* ")" ;

NUMBER
STRING
IDENTIFIER
TYPE -> ( "string" | "int" | "double" | "bool" ) ;
